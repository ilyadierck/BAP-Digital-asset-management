{"id":"node_modules/@ew-did-registry/did-resolver-interface/dist/models/resolver.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\dist\\models\\resolver.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\src\\models\\resolver.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\package.json","includedInParent":true,"mtime":1642814787149}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DelegateTypes = exports.DidEventNames = exports.ProviderTypes = void 0;\n/**\n * Specifies currently supported provider types. New types can be added in the future.\n */\nvar ProviderTypes;\n(function (ProviderTypes) {\n    ProviderTypes[ProviderTypes[\"HTTP\"] = 0] = \"HTTP\";\n    ProviderTypes[ProviderTypes[\"IPC\"] = 1] = \"IPC\";\n})(ProviderTypes = exports.ProviderTypes || (exports.ProviderTypes = {}));\nvar DidEventNames;\n(function (DidEventNames) {\n    DidEventNames[\"AttributeChanged\"] = \"DIDAttributeChanged\";\n    DidEventNames[\"DelegateChanged\"] = \"DIDDelegateChanged\";\n})(DidEventNames = exports.DidEventNames || (exports.DidEventNames = {}));\n/**\n * Our assumption that delegates can be of two types, according to the standard. However,\n * Other types can be added in the future, if required.\n */\nvar DelegateTypes;\n(function (DelegateTypes) {\n    DelegateTypes[\"authentication\"] = \"sigAuth\";\n    DelegateTypes[\"verification\"] = \"veriKey\";\n})(DelegateTypes = exports.DelegateTypes || (exports.DelegateTypes = {}));\n"},"sourceMaps":{"js":{"version":3,"file":"resolver.js","sourceRoot":"","sources":["../../src/models/resolver.ts"],"names":[],"mappings":";;;AAQA;;GAEG;AACH,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,iDAAI,CAAA;IACJ,+CAAG,CAAA;AACL,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;AAqFD,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,yDAAwC,CAAA;IACxC,uDAAsC,CAAA;AACxC,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB;AAsDD;;;GAGG;AACH,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,2CAA0B,CAAA;IAC1B,yCAAwB,CAAA;AAC1B,CAAC,EAHW,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAGxB","sourcesContent":["import {\n  utils,\n  BigNumber,\n  providers,\n  ContractInterface,\n} from 'ethers';\nimport { Methods } from '@ew-did-registry/did';\n\n/**\n * Specifies currently supported provider types. New types can be added in the future.\n */\nexport enum ProviderTypes {\n  HTTP,\n  IPC,\n}\n\n/**\n * Specifies Provider to be used to communicate with blockchain.\n * The uri, path, and method are the parameters found in the ethers library.\n * Hence, 'ethers' documentation is a good point to check the available options,\n * if one wants to extend the library.\n */\nexport interface ProviderSettings {\n  type: ProviderTypes;\n  uriOrInfo?: string | utils.ConnectionInfo;\n  path?: string;\n  network?: providers.Networkish;\n}\n\n/**\n * Resolver requires provider, as well as application binary interface and\n * address of the smart contract representing DID Registry\n */\nexport interface RegistrySettings {\n  address: string;\n  abi?: ContractInterface;\n  method?: Methods;\n}\n\nexport interface IServiceEndpoint {\n  id: string;\n  type: string;\n  serviceEndpoint: string;\n  description?: string;\n  validity: BigNumber;\n  block: number;\n  hash?: string; // hash of the content located at service endpoint\n  [key: string]: string | BigNumber | number | undefined;\n}\n\n/**\n * The interface of DID Document is compliant with W3C specification.\n * https://w3c.github.io/did-core/\n * The link above will be the best point of reference for the interface below, including\n * IServiceEndpoint, IPublicKey, IAuthentication, ILinkedDataProof\n */\nexport interface IDIDDocument {\n  '@context': string;\n  id: string;\n  publicKey: IPublicKey[];\n  authentication: Array<IAuthentication | string>;\n  delegates?: string[];\n  service: IServiceEndpoint[];\n  created?: string;\n  updated?: string;\n  proof?: ILinkedDataProof;\n}\n\nexport interface IPublicKey {\n  id: string;\n  type: string;\n  controller: string;\n  ethereumAddress?: string;\n  publicKeyBase64?: string;\n  publicKeyBase58?: string;\n  publicKeyHex?: string;\n  publicKeyPem?: string;\n  publicKeyJwk?: string;\n  publicKeyMultibase?: string;\n  validity: BigNumber;\n  block: number;\n  [key: string]: string | number | BigNumber | undefined;\n}\n\nexport interface IAuthentication {\n  type: string;\n  publicKey: string;\n  validity: BigNumber;\n  block?: number;\n  [key: string]: string | BigNumber | number | undefined;\n}\n\nexport interface ILinkedDataProof {\n  type: string;\n  created: string;\n  creator: string;\n  signatureValue: string;\n}\n\nexport enum DidEventNames {\n  AttributeChanged = 'DIDAttributeChanged',\n  DelegateChanged = 'DIDDelegateChanged'\n}\n\n/**\n * This interface represents the structure of event emitted by ERC1056 compliant smart contract.\n */\nexport interface ISmartContractEvent {\n  name: DidEventNames;\n  signature: string;\n  topic: string;\n  value?: string;\n}\n\nexport interface AttributeChangedEvent extends ISmartContractEvent {\n  name: DidEventNames.AttributeChanged;\n  values: {\n    identity: string;\n    name: string;\n    value: string;\n    validTo: BigNumber;\n    previousChange: BigNumber;\n  };\n}\n\nexport interface DelegateChangedEvent extends ISmartContractEvent {\n  name: DidEventNames.DelegateChanged;\n  values: {\n    identity: string;\n    delegateType: string;\n    delegate: string;\n    validTo: BigNumber;\n    previousChange: BigNumber;\n  };\n}\n\n/**\n * This interface is used to store the parse data from events.\n * The log data will be used for caching and further analysed to construct the did document,\n * as new data arrives.\n * The data in the did document will exclude certain variables, such as\n * 'lastChangedBlock', 'created', 'updated', 'proof'\n */\nexport interface IDIDLogData {\n  owner: string;\n  topBlock: BigNumber;\n  publicKey: { [key: string]: IPublicKey };\n  authentication: { [key: string]: IAuthentication };\n  delegates?: string[];\n  service: { [key: string]: IServiceEndpoint };\n  created?: string;\n  updated?: string;\n  proof?: ILinkedDataProof;\n  attributes: Map<string, { [key: string]: string | number | unknown }>;\n}\n\n/**\n * Our assumption that delegates can be of two types, according to the standard. However,\n * Other types can be added in the future, if required.\n */\nexport enum DelegateTypes {\n  authentication = 'sigAuth',\n  verification = 'veriKey',\n}\n\nexport type DocumentSelector = Partial<{\n  publicKey: Partial<IPublicKey>;\n  service: Partial<IServiceEndpoint>;\n  authentication: Partial<IAuthentication>;\n}>\n"]}},"error":null,"hash":"c8a1135ccdedf7f72627b3e7d8a1576a","cacheData":{"env":{}}}