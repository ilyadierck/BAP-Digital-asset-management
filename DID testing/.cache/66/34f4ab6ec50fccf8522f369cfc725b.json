{"id":"node_modules/@ew-did-registry/did/dist/index.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\dist\\index.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\src\\index.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\package.json","includedInParent":true,"mtime":1642814787113},{"name":"./models","loc":{"line":14,"column":25},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\dist\\index.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\dist\\models\\index.js"},{"name":"./utils/validation","loc":{"line":87,"column":21},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\dist\\index.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\dist\\utils\\validation.js"}],"generated":{"js":"\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Methods = exports.DID = void 0;\nconst models_1 = require(\"./models\");\nObject.defineProperty(exports, \"Methods\", { enumerable: true, get: function () { return models_1.Methods; } });\n/* eslint-disable no-underscore-dangle */\nclass DID {\n    constructor() {\n        /**\n         * Mappings from methods to DIDs\n         */\n        this._dids = new Map();\n    }\n    /**\n     * Gets a DID for a particular method\n     *\n     * @example\n     * ```typescript\n     * import { DID, Network } from '@ew-did-registry/did';\n     *\n     * const did = new DID();\n     * did.set('bitcoin', 'method_specific_id');\n     * console.log(did.get('bitcoin')); // 'did:bitcoin:method_specific_id'\n     *\n     * const did = new DID();\n     * did.set(Methods.Erc1056, 'method_specific_id');\n     * console.log(did.get(Methods.Erc1056)); // 'did:eth:method_specific_id'\n     * ```\n     *\n     * @param { Methods } method\n     *\n     * @returns { string|undefined }\n     */\n    get(method) {\n        return this._dids.get(method);\n    }\n    /**\n     * Sets a DID for the provided method\n     *\n     * @example\n     * ```typescript\n     * import { DID } from '@ew-did-registry/did';\n     *\n     * const did = new DID();\n     * did.set('eth', 'method_specific_id');\n     * console.log(did.get('eth')); // 'did:eth:method_specific_id'\n     * ```\n     *\n     * @param { Methods } method\n     * @param {string} id\n     *\n     * @returns {void}\n     */\n    // eslint-disable-next-line no-dupe-class-members\n    set(method, id) {\n        if (method.startsWith('did:')) {\n            return this._setDid(method);\n        }\n        return this._setDid(`did:${method}:${id}`);\n    }\n    _setDid(did) {\n        const [, method, id] = did.split(':');\n        if (id === undefined) {\n            throw new Error('DID must consist of three parts separated by a colon');\n        }\n        if (!models_1.DID_SCHEME_PATTERNS.NETWORK.test(method)) {\n            throw new Error('Network must not be empty and consist only of lowcase alphanumerical characters');\n        }\n        if (!models_1.DID_SCHEME_PATTERNS.ID.test(id)) {\n            throw new Error('Id must consist only of alphanumerical characters, dots, minuses and underscores');\n        }\n        this._dids.set(method, did);\n        return this;\n    }\n}\nexports.DID = DID;\n__exportStar(require(\"./utils/validation\"), exports);\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AACA,qCAAwD;AA+FtD,wFA/F4B,gBAAO,OA+F5B;AA7FT,yCAAyC;AACzC,MAAM,GAAG;IAAT;QACE;;WAEG;QACK,UAAK,GAAwB,IAAI,GAAG,EAAE,CAAC;IAmFjD,CAAC;IAjFC;;;;;;;;;;;;;;;;;;;OAmBG;IACH,GAAG,CAAC,MAAe;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAoBD;;;;;;;;;;;;;;;;OAgBG;IACH,iDAAiD;IACjD,GAAG,CAAC,MAAwB,EAAE,EAAW;QACvC,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;YAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SAC7B;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,MAAM,IAAI,EAAE,EAAE,CAAC,CAAC;IAC7C,CAAC;IAEO,OAAO,CAAC,GAAW;QACzB,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,EAAE,KAAK,SAAS,EAAE;YACpB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;SACzE;QACD,IAAI,CAAC,4BAAmB,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YAC7C,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;SACpG;QACD,IAAI,CAAC,4BAAmB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;YACpC,MAAM,IAAI,KAAK,CAAC,kFAAkF,CAAC,CAAC;SACrG;QACD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAIC,kBAAG;AAIL,qDAAmC","sourcesContent":["import { IDID } from './interface';\nimport { DID_SCHEME_PATTERNS, Methods } from './models';\n\n/* eslint-disable no-underscore-dangle */\nclass DID implements IDID {\n  /**\n   * Mappings from methods to DIDs\n   */\n  private _dids: Map<string, string> = new Map();\n\n  /**\n   * Gets a DID for a particular method\n   *\n   * @example\n   * ```typescript\n   * import { DID, Network } from '@ew-did-registry/did';\n   *\n   * const did = new DID();\n   * did.set('bitcoin', 'method_specific_id');\n   * console.log(did.get('bitcoin')); // 'did:bitcoin:method_specific_id'\n   *\n   * const did = new DID();\n   * did.set(Methods.Erc1056, 'method_specific_id');\n   * console.log(did.get(Methods.Erc1056)); // 'did:eth:method_specific_id'\n   * ```\n   *\n   * @param { Methods } method\n   *\n   * @returns { string|undefined }\n   */\n  get(method: Methods): string | undefined {\n    return this._dids.get(method);\n  }\n\n  /**\n   * Sets a DID for a particular method (inferred from DID provided)\n   *\n   * @example\n   * ```typescript\n   * import { DID } from '@ew-did-registry/did';\n   *\n   * const did = new DID();\n   * did.set('did:eth:method_specific_id');\n   * console.log(did.get('eth')); // 'did:eth:method_specific_id'\n   * ```\n   *\n   * @param {string} did\n   *\n   * @returns {void}\n   */\n  set(did: string): IDID;\n\n  /**\n   * Sets a DID for the provided method\n   *\n   * @example\n   * ```typescript\n   * import { DID } from '@ew-did-registry/did';\n   *\n   * const did = new DID();\n   * did.set('eth', 'method_specific_id');\n   * console.log(did.get('eth')); // 'did:eth:method_specific_id'\n   * ```\n   *\n   * @param { Methods } method\n   * @param {string} id\n   *\n   * @returns {void}\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  set(method: Methods | string, id?: string): IDID {\n    if (method.startsWith('did:')) {\n      return this._setDid(method);\n    }\n    return this._setDid(`did:${method}:${id}`);\n  }\n\n  private _setDid(did: string): IDID {\n    const [, method, id] = did.split(':');\n    if (id === undefined) {\n      throw new Error('DID must consist of three parts separated by a colon');\n    }\n    if (!DID_SCHEME_PATTERNS.NETWORK.test(method)) {\n      throw new Error('Network must not be empty and consist only of lowcase alphanumerical characters');\n    }\n    if (!DID_SCHEME_PATTERNS.ID.test(id)) {\n      throw new Error('Id must consist only of alphanumerical characters, dots, minuses and underscores');\n    }\n    this._dids.set(method, did);\n    return this;\n  }\n}\n\nexport {\n  IDID,\n  DID,\n  Methods,\n};\n\nexport * from './utils/validation';\n"]}},"error":null,"hash":"5731e8127fbb56fb3df683c3777d0b3b","cacheData":{"env":{}}}