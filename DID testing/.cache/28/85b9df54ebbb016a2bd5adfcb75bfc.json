{"id":"node_modules/@ew-did-registry/did-ipfs-store/dist/didStore.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ipfs-store\\dist\\didStore.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ipfs-store\\src\\didStore.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ipfs-store\\package.json","includedInParent":true,"mtime":1642815160320},{"name":"ipfs-http-client","loc":{"line":24,"column":51},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ipfs-store\\dist\\didStore.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\ipfs-http-client\\src\\index.js"},{"name":"bl","loc":{"line":25,"column":37},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ipfs-store\\dist\\didStore.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\bl\\bl.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DidStore = void 0;\n/* eslint-disable no-restricted-syntax */\nconst ipfs_http_client_1 = __importDefault(require(\"ipfs-http-client\"));\nconst bl_1 = __importDefault(require(\"bl\"));\nclass DidStore {\n    /**\n     * @param uri {string} - IPFS API server uri\n     */\n    constructor(uri) {\n        this.ipfs = ipfs_http_client_1.default(uri);\n    }\n    save(claim) {\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const asyncChunks = yield this.ipfs.add(claim);\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            let cid;\n            try {\n                for (var asyncChunks_1 = __asyncValues(asyncChunks), asyncChunks_1_1; asyncChunks_1_1 = yield asyncChunks_1.next(), !asyncChunks_1_1.done;) {\n                    const chunk = asyncChunks_1_1.value;\n                    cid = chunk.cid; // return cid from last (and only one) chunk\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (asyncChunks_1_1 && !asyncChunks_1_1.done && (_a = asyncChunks_1.return)) yield _a.call(asyncChunks_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return cid.toString();\n        });\n    }\n    /**\n     * @param uri {string} CID of the file with claim content\n     */\n    get(uri) {\n        var e_2, _a, e_3, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            let claim = '';\n            try {\n                for (var _c = __asyncValues(this.ipfs.get(`/ipfs/${uri}`)), _d; _d = yield _c.next(), !_d.done;) {\n                    const file = _d.value;\n                    const content = new bl_1.default();\n                    try {\n                        for (var _e = (e_3 = void 0, __asyncValues(file.content)), _f; _f = yield _e.next(), !_f.done;) {\n                            const chunk = _f.value;\n                            content.append(chunk);\n                        }\n                    }\n                    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                    finally {\n                        try {\n                            if (_f && !_f.done && (_b = _e.return)) yield _b.call(_e);\n                        }\n                        finally { if (e_3) throw e_3.error; }\n                    }\n                    claim += content.toString();\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) yield _a.call(_c);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            return claim;\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    delete(uri) {\n        return __awaiter(this, void 0, void 0, function* () {\n            throw new Error('Not supported by IPFS');\n        });\n    }\n}\nexports.DidStore = DidStore;\n"},"sourceMaps":{"js":{"version":3,"file":"didStore.js","sourceRoot":"","sources":["../src/didStore.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAyC;AACzC,wEAA0C;AAC1C,4CAA4B;AAG5B,MAAa,QAAQ;IAInB;;OAEG;IACH,YAAY,GAAoB;QAC9B,IAAI,CAAC,IAAI,GAAG,0BAAU,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAEK,IAAI,CAAC,KAAa;;;YACtB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC/C,8DAA8D;YAC9D,IAAI,GAAQ,CAAC;;gBACb,KAA0B,IAAA,gBAAA,cAAA,WAAW,CAAA,iBAAA;oBAA1B,MAAM,KAAK,wBAAA,CAAA;oBACpB,GAAG,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,4CAA4C;iBAC9D;;;;;;;;;YACD,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;;KACvB;IAED;;OAEG;IACG,GAAG,CAAC,GAAW;;;YACnB,IAAI,KAAK,GAAG,EAAE,CAAC;;gBACf,KAAyB,IAAA,KAAA,cAAA,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,GAAG,EAAE,CAAC,CAAA,IAAA;oBAA3C,MAAM,IAAI,WAAA,CAAA;oBACnB,MAAM,OAAO,GAAG,IAAI,YAAU,EAAE,CAAC;;wBACjC,KAA0B,IAAA,oBAAA,cAAA,IAAI,CAAC,OAAO,CAAA,CAAA,IAAA;4BAA3B,MAAM,KAAK,WAAA,CAAA;4BACpB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;yBACvB;;;;;;;;;oBACD,KAAK,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;iBAC7B;;;;;;;;;YACD,OAAO,KAAK,CAAC;;KACd;IAED,6DAA6D;IACvD,MAAM,CAAC,GAAW;;YACtB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;QAC3C,CAAC;KAAA;CACF;AAxCD,4BAwCC","sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport ipfsClient from 'ipfs-http-client';\nimport BufferList from 'bl';\nimport { IDidStore } from '@ew-did-registry/did-store-interface';\n\nexport class DidStore implements IDidStore {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private ipfs: any;\n\n  /**\n   * @param uri {string} - IPFS API server uri\n   */\n  constructor(uri: string | object) {\n    this.ipfs = ipfsClient(uri);\n  }\n\n  async save(claim: string): Promise<string> {\n    const asyncChunks = await this.ipfs.add(claim);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let cid: any;\n    for await (const chunk of asyncChunks) {\n      cid = chunk.cid; // return cid from last (and only one) chunk\n    }\n    return cid.toString();\n  }\n\n  /**\n   * @param uri {string} CID of the file with claim content\n   */\n  async get(uri: string): Promise<string> {\n    let claim = '';\n    for await (const file of this.ipfs.get(`/ipfs/${uri}`)) {\n      const content = new BufferList();\n      for await (const chunk of file.content) {\n        content.append(chunk);\n      }\n      claim += content.toString();\n    }\n    return claim;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async delete(uri: string): Promise<boolean> {\n    throw new Error('Not supported by IPFS');\n  }\n}\n"]}},"error":null,"hash":"b9d86b3e6aed260e1b2221fa560993a3","cacheData":{"env":{}}}