{"id":"node_modules/it-to-buffer/index.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\it-to-buffer\\package.json","includedInParent":true,"mtime":499162500000},{"name":"buffer","loc":{"line":3,"column":27},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\it-to-buffer\\index.js","resolved":"C:\\Users\\Ilya\\AppData\\Roaming\\npm\\node_modules\\parcel-bundler\\node_modules\\buffer\\index.js"}],"generated":{"js":"\n'use strict'\n\nconst { Buffer } = require('buffer')\n\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n * @param {AsyncIterable<Buffer>|Iterable<Buffer>} stream\n * @returns {Promise<Buffer>}\n */\nasync function toBuffer (stream) {\n  let buffer = Buffer.alloc(0)\n\n  for await (const buf of stream) {\n    buffer = Buffer.concat([buffer, buf], buffer.length + buf.length)\n  }\n\n  return buffer\n}\n\nmodule.exports = toBuffer\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/it-to-buffer/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/it-to-buffer/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}}],"sources":{"node_modules/it-to-buffer/index.js":"'use strict'\n\nconst { Buffer } = require('buffer')\n\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n * @param {AsyncIterable<Buffer>|Iterable<Buffer>} stream\n * @returns {Promise<Buffer>}\n */\nasync function toBuffer (stream) {\n  let buffer = Buffer.alloc(0)\n\n  for await (const buf of stream) {\n    buffer = Buffer.concat([buffer, buf], buffer.length + buf.length)\n  }\n\n  return buffer\n}\n\nmodule.exports = toBuffer\n"},"lineCount":23}},"error":null,"hash":"133f188018969a0febd7619ff9c7a937","cacheData":{"env":{}}}