{"id":"node_modules/@ew-did-registry/did-ethr-resolver/dist/implementations/operator.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\operator.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\src\\implementations\\operator.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\package.json","includedInParent":true,"mtime":1642814787149},{"name":"ethers","loc":{"line":24,"column":25},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\operator.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\ethers\\lib.esm\\index.js"},{"name":"@ew-did-registry/did-resolver-interface","loc":{"line":25,"column":41},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\operator.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\dist\\index.js"},{"name":"@ew-did-registry/did","loc":{"line":26,"column":22},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\operator.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\dist\\index.js"},{"name":"./resolver","loc":{"line":27,"column":43},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\operator.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\resolver.js"},{"name":"../constants","loc":{"line":28,"column":28},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\operator.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\constants\\index.js"},{"name":"../utils","loc":{"line":29,"column":24},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\operator.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\utils\\index.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __asyncValues = (this && this.__asyncValues) || function (o) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var m = o[Symbol.asyncIterator], i;\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Operator = void 0;\n/* eslint-disable no-restricted-syntax */\nconst ethers_1 = require(\"ethers\");\nconst did_resolver_interface_1 = require(\"@ew-did-registry/did-resolver-interface\");\nconst did_1 = require(\"@ew-did-registry/did\");\nconst resolver_1 = __importDefault(require(\"./resolver\"));\nconst constants_1 = require(\"../constants\");\nconst utils_1 = require(\"../utils\");\nconst { PublicKey, ServicePoint } = did_resolver_interface_1.DIDAttribute;\nconst { formatBytes32String } = ethers_1.utils;\n/**\n * To support/extend this Class, one just has to work with this file.\n * All the supporting functions are stored as private methods (i.e. with the '_' symbol)\n * One can easily extend the methods available by researching the smart contract functionality,\n * as well as by understanding how the read is performed.\n */\nclass Operator extends resolver_1.default {\n    /**\n    * @param owner - Entity which controls document\n    * @param settings - Settings to connect to Ethr registry\n    */\n    constructor(owner, settings) {\n        super(owner.provider, settings);\n        this._keys = {\n            privateKey: '',\n            publicKey: '',\n        };\n        const { address, abi, } = this.settings;\n        this._owner = owner;\n        this._keys.publicKey = owner.publicKey;\n        this._didRegistry = new ethers_1.ethers.Contract(address, abi, owner);\n    }\n    getAddress() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.address) {\n                this.address = yield this._owner.getAddress();\n            }\n            return this.address;\n        });\n    }\n    did() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return `did:${this.settings.method}:${yield this.getAddress()}`;\n        });\n    }\n    getPublicKey() {\n        return this._keys.publicKey;\n    }\n    /**\n   * Relevant did should have positive cryptocurrency balance to perform\n   * the transaction. Create method saves the public key in smart contract's\n   * event, which can be qualified as document creation\n   *\n   * @param did\n   * @param context\n   * @returns Promise<boolean>\n   */\n    create() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const did = yield this.did();\n            const readPubKey = yield this.readOwnerPubKey(did);\n            if (readPubKey) {\n                return true;\n            }\n            const attribute = did_resolver_interface_1.DIDAttribute.PublicKey;\n            const updateData = {\n                algo: did_resolver_interface_1.Algorithms.Secp256k1,\n                type: did_resolver_interface_1.PubKeyType.VerificationKey2018,\n                encoding: did_resolver_interface_1.Encoding.HEX,\n                value: { publicKey: `0x${this.getPublicKey()}`, tag: did_resolver_interface_1.KeyTags.OWNER },\n            };\n            yield this.update(did, attribute, updateData);\n            return true;\n        });\n    }\n    /**\n    * Sets attribute value in DID document identified by the did\n    *\n    * @example\n    *```typescript\n    * import {\n    * Operator, DIDAttribute, Algorithms, PubKeyType, Encoding\n    *  } from '@ew-did-registry/did-resolver';\n    * import { Keys } from '@ew-did-registry/keys';\n    * const providerSettings = {\n    *   type: ProviderTypes.HTTP,\n    *   uriOrInfo: 'https://volta-rpc.energyweb.org',\n    * }\n    * const ownerKeys = new Keys();\n    * const owner = EwSigner.fromPrivateKey(ownerKeys.privateKey, providerSettings);\n    * const operator = new Operator(\n    *     owner,\n    *     resolverSettings,\n    *    );\n    * const pKey = DIDAttribute.PublicKey;\n    * const updateData = {\n    *     algo: Algorithms.ED25519,\n    *     type: PubKeyType.VerificationKey2018,\n    *     encoding: Encoding.HEX,\n    *     value: new Keys().publicKey,\n    * };\n    * const validity = 10 * 60 * 1000;\n    * const updated = await operator.update(did, pKey, updateData, validity);\n    * ```\n    *\n    * @param { string } did - did associated with DID document\n    * @param { DIDAttribute } didAttribute - specifies updated section in DID document. Must be 31\n    * bytes or shorter\n    * @param { IUpdateData } updateData\n    * @param { number } validity - time in milliseconds during which\n    *                              attribute will be valid\n    * @returns Promise<number>\n    */\n    update(did, didAttribute, updateData, validity = Number.MAX_SAFE_INTEGER - 1) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const method = didAttribute === PublicKey || didAttribute === ServicePoint\n                ? 'setAttribute'\n                : 'addDelegate';\n            if (validity < 0) {\n                throw new Error('Validity must be non negative value');\n            }\n            return this._sendTransaction(method, did, didAttribute, updateData, validity);\n        });\n    }\n    /**\n    * Revokes the delegate from DID Document\n    * Returns true on success\n    *\n    * @param { string } did - did of identity of interest\n    * @param { PubKeyType } delegateType - type of delegate of interest\n    * @param { string } delegate - did of delegate of interest\n    * @returns Promise<boolean>\n    */\n    revokeDelegate(did, delegateType, delegateDID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._sendTransaction('revokeDelegate', did, did_resolver_interface_1.DIDAttribute.Authenticate, {\n                type: delegateType,\n                delegate: utils_1.addressOf(delegateDID),\n            });\n            return true;\n        });\n    }\n    /**\n    * Revokes attribute from DID Document\n    * Returns true on success\n    *\n    * @param { string } did - did of identity of interest\n    * @param { DIDAttribute } attributeType - type of attribute to revoke\n    * @param { IUpdateData } updateData - data required to identify the correct attribute to revoke\n    * @returns Promise<boolean>\n    */\n    revokeAttribute(did, attributeType, updateData) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._sendTransaction('revokeAttribute', did, attributeType, updateData);\n            return true;\n        });\n    }\n    /**\n    * Changes the owner of particular decentralised identity\n    * Returns true on success\n    *\n    * @param { string } did - did of current identity owner\n    * @param { string } newOwner - did of new owner that will be set on success\n    * @returns Promise<boolean>\n    */\n    changeOwner(did, newOwner) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const tx = yield this._didRegistry.changeOwner(utils_1.addressOf(did), utils_1.addressOf(newOwner));\n                const receipt = yield tx.wait();\n                const event = receipt.events.find((e) => (e.event === 'DIDOwnerChanged'));\n                if (!event)\n                    return false;\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return true;\n        });\n    }\n    /**\n    * Revokes authentication methods, public keys and delegates from DID document\n    *\n    * @example\n    * ```typescript\n    *import { Operator } from '@ew-did-registry/did-resolver';\n    *import { Keys } from '@ew-did-registry/keys';\n    *\n    * const providerSettings = {\n    *   type: ProviderTypes.HTTP,\n    *   uriOrInfo: 'https://volta-rpc.energyweb.org',\n    * }\n    * const ownerKeys = new Keys();\n    * const owner = EwSigner.fromPrivateKey(ownerKeys.privateKey, providerSettings);\n    * const operator = new Operator(\n    *   owner,\n    *   resolverSettings,\n    *  );\n    * const updated = await operator.deactivate(did);\n    * ```\n    *\n    * @param did\n    * @returns Promise<boolean>\n    */\n    deactivate(did) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const document = yield this.read(did);\n            yield this._revokeAuthentications(did, document.authentication, document.publicKey);\n            yield this._revokePublicKeys(did, document.publicKey);\n            yield this._revokeServices(did, document.service);\n        });\n    }\n    /**\n   * Revokes authentication attributes\n   *\n   * @param did\n   * @param auths\n   * @param publicKeys\n   * @private\n   */\n    _revokeAuthentications(did, auths, publicKeys) {\n        var publicKeys_1, publicKeys_1_1;\n        var e_1, _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                for (publicKeys_1 = __asyncValues(publicKeys); publicKeys_1_1 = yield publicKeys_1.next(), !publicKeys_1_1.done;) {\n                    const pk = publicKeys_1_1.value;\n                    const match = pk.id.match(constants_1.delegatePubKeyIdPattern);\n                    if (match) {\n                        const type = auths.find((auth) => auth.publicKey === match[0]) ? did_resolver_interface_1.PubKeyType.SignatureAuthentication2018\n                            : did_resolver_interface_1.PubKeyType.VerificationKey2018;\n                        yield this.revokeDelegate(did, type, `did:${did_1.Methods.Erc1056}:${pk.ethereumAddress}`);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (publicKeys_1_1 && !publicKeys_1_1.done && (_a = publicKeys_1.return)) yield _a.call(publicKeys_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        });\n    }\n    /**\n   * Revokes Public key attribute\n   *\n   * @param did\n   * @param publicKeys\n   * @private\n   */\n    _revokePublicKeys(did, publicKeys) {\n        var publicKeys_2, publicKeys_2_1;\n        var e_2, _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                for (publicKeys_2 = __asyncValues(publicKeys); publicKeys_2_1 = yield publicKeys_2.next(), !publicKeys_2_1.done;) {\n                    const pk = publicKeys_2_1.value;\n                    const match = pk.id.match(constants_1.pubKeyIdPattern);\n                    if (match) {\n                        const encoding = Object.values(did_resolver_interface_1.Encoding)\n                            .find((enc) => pk[utils_1.encodedPubKeyName(enc)]);\n                        yield this.revokeAttribute(did, did_resolver_interface_1.DIDAttribute.PublicKey, {\n                            type: did_resolver_interface_1.DIDAttribute.PublicKey,\n                            value: {\n                                id: pk.id,\n                                publicKey: pk[utils_1.encodedPubKeyName(encoding)],\n                                tag: pk.id.split('#')[1],\n                            },\n                        });\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (publicKeys_2_1 && !publicKeys_2_1.done && (_a = publicKeys_2.return)) yield _a.call(publicKeys_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        });\n    }\n    /**\n   * Revokes service attributes\n   *\n   * @param did\n   * @param services\n   * @private\n   */\n    _revokeServices(did, services) {\n        var services_1, services_1_1;\n        var e_3, _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                for (services_1 = __asyncValues(services); services_1_1 = yield services_1.next(), !services_1_1.done;) {\n                    const service = services_1_1.value;\n                    yield this.revokeAttribute(did, did_resolver_interface_1.DIDAttribute.ServicePoint, {\n                        type: did_resolver_interface_1.DIDAttribute.ServicePoint,\n                        value: {\n                            id: service.id,\n                            type: service.type,\n                            serviceEndpoint: service.serviceEndpoint,\n                        },\n                    });\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (services_1_1 && !services_1_1.done && (_a = services_1.return)) yield _a.call(services_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        });\n    }\n    /**\n   * Private function to send transactions\n   *\n   * @param method\n   * @param did\n   * @param didAttribute\n   * @param updateData\n   * @param validity\n   * @param overrides\n   * @private\n   */\n    _sendTransaction(method, did, didAttribute, updateData, validity, overrides) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const identity = utils_1.addressOf(did);\n            const name = formatBytes32String(this._composeAttributeName(didAttribute, updateData));\n            const value = utils_1.hexify(didAttribute === PublicKey || didAttribute === ServicePoint\n                ? updateData.value\n                : updateData.delegate);\n            const params = [\n                identity,\n                name,\n                value,\n            ];\n            if (validity !== undefined) {\n                params.push(validity);\n            }\n            if (overrides) {\n                params.push(overrides);\n            }\n            try {\n                const tx = yield this._didRegistry[method](...params);\n                const receipt = yield tx.wait();\n                const event = receipt.events.find((e) => (didAttribute === did_resolver_interface_1.DIDAttribute.PublicKey && e.event === 'DIDAttributeChanged')\n                    || (didAttribute === did_resolver_interface_1.DIDAttribute.ServicePoint && e.event === 'DIDAttributeChanged')\n                    || (didAttribute === did_resolver_interface_1.DIDAttribute.Authenticate && e.event === 'DIDDelegateChanged'));\n                return ethers_1.BigNumber.from(event.blockNumber);\n            }\n            catch (e) {\n                throw new Error(e.message);\n            }\n        });\n    }\n    /**\n   * Util functions to create attribute name, supported by read method\n   *\n   * @param attribute\n   * @param updateData\n   * @private\n   */\n    _composeAttributeName(attribute, updateData) {\n        const { algo, type, encoding, } = updateData;\n        switch (attribute) {\n            case did_resolver_interface_1.DIDAttribute.PublicKey:\n                return `did/${did_resolver_interface_1.DIDAttribute.PublicKey}/${algo}/${type}/${encoding}`;\n            case did_resolver_interface_1.DIDAttribute.Authenticate:\n                return updateData.type;\n            case did_resolver_interface_1.DIDAttribute.ServicePoint:\n                return `did/${did_resolver_interface_1.DIDAttribute.ServicePoint}/${updateData.value.type}`;\n            default:\n                throw new Error('Unknown attribute name');\n        }\n    }\n}\nexports.Operator = Operator;\n"},"sourceMaps":{"js":{"version":3,"file":"operator.js","sourceRoot":"","sources":["../../src/implementations/operator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,yCAAyC;AACzC,mCAEgB;AAChB,oFAciD;AACjD,8CAA+C;AAC/C,0DAAkC;AAClC,4CAEsB;AACtB,oCAEkB;AAGlB,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,qCAAY,CAAC;AACjD,MAAM,EAAE,mBAAmB,EAAE,GAAG,cAAK,CAAC;AAEtC;;;;;GAKG;AACH,MAAa,QAAS,SAAQ,kBAAQ;IAepC;;;MAGE;IACF,YACE,KAAe,EACf,QAA0B;QAE1B,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAfjB,UAAK,GAAG;YACvB,UAAU,EAAE,EAAE;YACd,SAAS,EAAE,EAAE;SACd,CAAC;QAcA,MAAM,EACJ,OAAO,EAAE,GAAG,GACb,GAAG,IAAI,CAAC,QAAQ,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;QACvC,IAAI,CAAC,YAAY,GAAG,IAAI,eAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAC/D,CAAC;IAEe,UAAU;;YACxB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;aAC/C;YACD,OAAO,IAAI,CAAC,OAAiB,CAAC;QAChC,CAAC;KAAA;IAEa,GAAG;;YACf,OAAO,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,MAAM,IAAI,CAAC,UAAU,EAAE,EAAE,CAAC;QAClE,CAAC;KAAA;IAEM,YAAY;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;IAC9B,CAAC;IAED;;;;;;;;KAQC;IACK,MAAM;;YACV,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YACnD,IAAI,UAAU,EAAE;gBACd,OAAO,IAAI,CAAC;aACb;YACD,MAAM,SAAS,GAAG,qCAAY,CAAC,SAAS,CAAC;YACzC,MAAM,UAAU,GAAgB;gBAC9B,IAAI,EAAE,mCAAU,CAAC,SAAS;gBAC1B,IAAI,EAAE,mCAAU,CAAC,mBAAmB;gBACpC,QAAQ,EAAE,iCAAQ,CAAC,GAAG;gBACtB,KAAK,EAAE,EAAE,SAAS,EAAE,KAAK,IAAI,CAAC,YAAY,EAAE,EAAE,EAAE,GAAG,EAAE,gCAAO,CAAC,KAAK,EAAE;aACrE,CAAC;YACF,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;YAC9C,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAqCE;IACI,MAAM,CACV,GAAW,EACX,YAA0B,EAC1B,UAAuB,EACvB,WAAmB,MAAM,CAAC,gBAAgB,GAAG,CAAC;;YAE9C,MAAM,MAAM,GAAG,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,YAAY;gBACxE,CAAC,CAAC,cAAc;gBAChB,CAAC,CAAC,aAAa,CAAC;YAClB,IAAI,QAAQ,GAAG,CAAC,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aACxD;YACD,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAG,EAAE,YAAY,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;QAChF,CAAC;KAAA;IAED;;;;;;;;MAQE;IACI,cAAc,CAClB,GAAW,EACX,YAAwB,EACxB,WAAmB;;YAEnB,MAAM,IAAI,CAAC,gBAAgB,CACzB,gBAAgB,EAChB,GAAG,EACH,qCAAY,CAAC,YAAY,EACzB;gBACE,IAAI,EAAE,YAAY;gBAClB,QAAQ,EAAE,iBAAS,CAAC,WAAW,CAAC;aACjC,CACF,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;MAQE;IACI,eAAe,CACnB,GAAW,EACX,aAA2B,EAC3B,UAAgC;;YAEhC,MAAM,IAAI,CAAC,gBAAgB,CACzB,iBAAiB,EACjB,GAAG,EACH,aAAa,EACb,UAAU,CACX,CAAC;YACF,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;MAOE;IACI,WAAW,CACf,GAAW,EACX,QAAgB;;YAEhB,IAAI;gBACF,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAC5C,iBAAS,CAAC,GAAG,CAAC,EACd,iBAAS,CAAC,QAAQ,CAAC,CACpB,CAAC;gBACF,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;gBAChC,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,IAAI,CAC/B,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,iBAAiB,CAAC,CAC9C,CAAC;gBACF,IAAI,CAAC,KAAK;oBAAE,OAAO,KAAK,CAAC;aAC1B;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC;aACxB;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;;;;;;;;MAuBE;IACI,UAAU,CAAC,GAAW;;YAC1B,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACtC,MAAM,IAAI,CAAC,sBAAsB,CAC/B,GAAG,EACH,QAAQ,CAAC,cAAmC,EAC5C,QAAQ,CAAC,SAAS,CACnB,CAAC;YACF,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC;YACtD,MAAM,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpD,CAAC;KAAA;IAED;;;;;;;KAOC;IACe,sBAAsB,CACpC,GAAW,EACX,KAAwB,EACxB,UAAwB;;;;;gBAExB,KAAuB,eAAA,cAAA,UAAU,CAAA;oBAAtB,MAAM,EAAE,uBAAA,CAAA;oBACjB,MAAM,KAAK,GAAG,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,mCAAuB,CAAC,CAAC;oBACnD,IAAI,KAAK,EAAE;wBACT,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CACrB,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,CAAC,CAAC,CACtC,CAAC,CAAC,CAAC,mCAAU,CAAC,2BAA2B;4BACxC,CAAC,CAAC,mCAAU,CAAC,mBAAmB,CAAC;wBACnC,MAAM,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,IAAI,EAAE,OAAO,aAAO,CAAC,OAAO,IAAI,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC;qBACtF;iBACF;;;;;;;;;;KACF;IAED;;;;;;KAMC;IACe,iBAAiB,CAAC,GAAW,EAAE,UAAwB;;;;;gBACrE,KAAuB,eAAA,cAAA,UAAU,CAAA;oBAAtB,MAAM,EAAE,uBAAA,CAAA;oBACjB,MAAM,KAAK,GAAG,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,2BAAe,CAAC,CAAC;oBAC3C,IAAI,KAAK,EAAE;wBACT,MAAM,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,iCAAQ,CAAC;6BACrC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,yBAAiB,CAAC,GAAG,CAAC,CAAC,CAAa,CAAC;wBACzD,MAAM,IAAI,CAAC,eAAe,CACxB,GAAG,EACH,qCAAY,CAAC,SAAS,EACtB;4BACE,IAAI,EAAE,qCAAY,CAAC,SAAS;4BAC5B,KAAK,EAAE;gCACL,EAAE,EAAE,EAAE,CAAC,EAAE;gCACT,SAAS,EAAE,EAAE,CAAC,yBAAiB,CAAC,QAAQ,CAAC,CAAW;gCACpD,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;6BACzB;yBACF,CACF,CAAC;qBACH;iBACF;;;;;;;;;;KACF;IAED;;;;;;KAMC;IACe,eAAe,CAAC,GAAW,EAAE,QAA4B;;;;;gBACvE,KAA4B,aAAA,cAAA,QAAQ,CAAA;oBAAzB,MAAM,OAAO,qBAAA,CAAA;oBACtB,MAAM,IAAI,CAAC,eAAe,CACxB,GAAG,EACH,qCAAY,CAAC,YAAY,EACzB;wBACE,IAAI,EAAE,qCAAY,CAAC,YAAY;wBAC/B,KAAK,EAAE;4BACL,EAAE,EAAE,OAAO,CAAC,EAAE;4BACd,IAAI,EAAE,OAAO,CAAC,IAAI;4BAClB,eAAe,EAAE,OAAO,CAAC,eAAe;yBACzC;qBACF,CACF,CAAC;iBACH;;;;;;;;;;KACF;IAED;;;;;;;;;;KAUC;IACe,gBAAgB,CAC9B,MAAc,EACd,GAAW,EACX,YAA0B,EAC1B,UAAuB,EACvB,QAAiB,EACjB,SAEC;;YAED,MAAM,QAAQ,GAAG,iBAAS,CAAC,GAAG,CAAC,CAAC;YAChC,MAAM,IAAI,GAAG,mBAAmB,CAC9B,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,UAAU,CAAC,CACrD,CAAC;YACF,MAAM,KAAK,GAAG,cAAM,CAClB,YAAY,KAAK,SAAS,IAAI,YAAY,KAAK,YAAY;gBACzD,CAAC,CAAC,UAAU,CAAC,KAA0B;gBACvC,CAAC,CAAC,UAAU,CAAC,QAAkB,CAClC,CAAC;YACF,MAAM,MAAM,GAAkD;gBAC5D,QAAQ;gBACR,IAAI;gBACJ,KAAK;aACN,CAAC;YACF,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC1B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aACvB;YACD,IAAI,SAAS,EAAE;gBACb,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACxB;YACD,IAAI;gBACF,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;gBACtD,MAAM,OAAO,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC;gBAChC,MAAM,KAAK,GAAU,OAAO,CAAC,MAAM,CAAC,IAAI,CACtC,CAAC,CAAQ,EAAE,EAAE,CAAC,CAAC,YAAY,KAAK,qCAAY,CAAC,SAAS,IAAI,CAAC,CAAC,KAAK,KAAK,qBAAqB,CAAC;uBACvF,CAAC,YAAY,KAAK,qCAAY,CAAC,YAAY,IAAI,CAAC,CAAC,KAAK,KAAK,qBAAqB,CAAC;uBACjF,CAAC,YAAY,KAAK,qCAAY,CAAC,YAAY,IAAI,CAAC,CAAC,KAAK,KAAK,oBAAoB,CAAC,CACtF,CAAC;gBACF,OAAO,kBAAS,CAAC,IAAI,CAAC,KAAK,CAAC,WAAqB,CAAC,CAAC;aACpD;YAAC,OAAO,CAAC,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;aAC5B;QACH,CAAC;KAAA;IAED;;;;;;KAMC;IACS,qBAAqB,CAAC,SAAuB,EAAE,UAAuB;QAC9E,MAAM,EACJ,IAAI,EAAE,IAAI,EAAE,QAAQ,GACrB,GAAG,UAAU,CAAC;QACf,QAAQ,SAAS,EAAE;YACjB,KAAK,qCAAY,CAAC,SAAS;gBACzB,OAAO,OAAO,qCAAY,CAAC,SAAS,IAAI,IAAI,IAAI,IAAI,IAAI,QAAQ,EAAE,CAAC;YACrE,KAAK,qCAAY,CAAC,YAAY;gBAC5B,OAAO,UAAU,CAAC,IAAI,CAAC;YACzB,KAAK,qCAAY,CAAC,YAAY;gBAC5B,OAAO,OAAO,qCAAY,CAAC,YAAY,IAAK,UAAU,CAAC,KAA2B,CAAC,IAAI,EAAE,CAAC;YAC5F;gBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;SAC7C;IACH,CAAC;CACF;AA1YD,4BA0YC","sourcesContent":["/* eslint-disable no-restricted-syntax */\nimport {\n  Contract, ethers, Event, utils, BigNumber,\n} from 'ethers';\nimport {\n  Algorithms,\n  DIDAttribute,\n  Encoding,\n  IAuthentication,\n  IOperator,\n  IPublicKey,\n  IServiceEndpoint,\n  IUpdateData,\n  IAttributePayload,\n  PubKeyType,\n  KeyTags,\n  RegistrySettings,\n  IUpdateAttributeData,\n} from '@ew-did-registry/did-resolver-interface';\nimport { Methods } from '@ew-did-registry/did';\nimport Resolver from './resolver';\nimport {\n  delegatePubKeyIdPattern, pubKeyIdPattern,\n} from '../constants';\nimport {\n  encodedPubKeyName, hexify, addressOf,\n} from '../utils';\nimport { EwSigner } from './ewSigner';\n\nconst { PublicKey, ServicePoint } = DIDAttribute;\nconst { formatBytes32String } = utils;\n\n/**\n * To support/extend this Class, one just has to work with this file.\n * All the supporting functions are stored as private methods (i.e. with the '_' symbol)\n * One can easily extend the methods available by researching the smart contract functionality,\n * as well as by understanding how the read is performed.\n */\nexport class Operator extends Resolver implements IOperator {\n  /**\n   * ERC-1056 compliant ethereum smart-contract\n   */\n  private _didRegistry: Contract;\n\n  private _owner: EwSigner;\n\n  private readonly _keys = {\n    privateKey: '',\n    publicKey: '',\n  };\n\n  private address?: string;\n\n  /**\n  * @param owner - Entity which controls document\n  * @param settings - Settings to connect to Ethr registry\n  */\n  constructor(\n    owner: EwSigner,\n    settings: RegistrySettings,\n  ) {\n    super(owner.provider, settings);\n\n    const {\n      address, abi,\n    } = this.settings;\n    this._owner = owner;\n    this._keys.publicKey = owner.publicKey;\n    this._didRegistry = new ethers.Contract(address, abi, owner);\n  }\n\n  protected async getAddress(): Promise<string> {\n    if (!this.address) {\n      this.address = await this._owner.getAddress();\n    }\n    return this.address as string;\n  }\n\n  private async did(): Promise<string> {\n    return `did:${this.settings.method}:${await this.getAddress()}`;\n  }\n\n  public getPublicKey(): string {\n    return this._keys.publicKey;\n  }\n\n  /**\n * Relevant did should have positive cryptocurrency balance to perform\n * the transaction. Create method saves the public key in smart contract's\n * event, which can be qualified as document creation\n *\n * @param did\n * @param context\n * @returns Promise<boolean>\n */\n  async create(): Promise<boolean> {\n    const did = await this.did();\n    const readPubKey = await this.readOwnerPubKey(did);\n    if (readPubKey) {\n      return true;\n    }\n    const attribute = DIDAttribute.PublicKey;\n    const updateData: IUpdateData = {\n      algo: Algorithms.Secp256k1,\n      type: PubKeyType.VerificationKey2018,\n      encoding: Encoding.HEX,\n      value: { publicKey: `0x${this.getPublicKey()}`, tag: KeyTags.OWNER },\n    };\n    await this.update(did, attribute, updateData);\n    return true;\n  }\n\n  /**\n  * Sets attribute value in DID document identified by the did\n  *\n  * @example\n  *```typescript\n  * import {\n  * Operator, DIDAttribute, Algorithms, PubKeyType, Encoding\n  *  } from '@ew-did-registry/did-resolver';\n  * import { Keys } from '@ew-did-registry/keys';\n  * const providerSettings = {\n  *   type: ProviderTypes.HTTP,\n  *   uriOrInfo: 'https://volta-rpc.energyweb.org',\n  * }\n  * const ownerKeys = new Keys();\n  * const owner = EwSigner.fromPrivateKey(ownerKeys.privateKey, providerSettings);\n  * const operator = new Operator(\n  *     owner,\n  *     resolverSettings,\n  *    );\n  * const pKey = DIDAttribute.PublicKey;\n  * const updateData = {\n  *     algo: Algorithms.ED25519,\n  *     type: PubKeyType.VerificationKey2018,\n  *     encoding: Encoding.HEX,\n  *     value: new Keys().publicKey,\n  * };\n  * const validity = 10 * 60 * 1000;\n  * const updated = await operator.update(did, pKey, updateData, validity);\n  * ```\n  *\n  * @param { string } did - did associated with DID document\n  * @param { DIDAttribute } didAttribute - specifies updated section in DID document. Must be 31\n  * bytes or shorter\n  * @param { IUpdateData } updateData\n  * @param { number } validity - time in milliseconds during which\n  *                              attribute will be valid\n  * @returns Promise<number>\n  */\n  async update(\n    did: string,\n    didAttribute: DIDAttribute,\n    updateData: IUpdateData,\n    validity: number = Number.MAX_SAFE_INTEGER - 1, // preventing BigNumber.from overflow error\n  ): Promise<BigNumber> {\n    const method = didAttribute === PublicKey || didAttribute === ServicePoint\n      ? 'setAttribute'\n      : 'addDelegate';\n    if (validity < 0) {\n      throw new Error('Validity must be non negative value');\n    }\n    return this._sendTransaction(method, did, didAttribute, updateData, validity);\n  }\n\n  /**\n  * Revokes the delegate from DID Document\n  * Returns true on success\n  *\n  * @param { string } did - did of identity of interest\n  * @param { PubKeyType } delegateType - type of delegate of interest\n  * @param { string } delegate - did of delegate of interest\n  * @returns Promise<boolean>\n  */\n  async revokeDelegate(\n    did: string,\n    delegateType: PubKeyType,\n    delegateDID: string,\n  ): Promise<boolean> {\n    await this._sendTransaction(\n      'revokeDelegate',\n      did,\n      DIDAttribute.Authenticate,\n      {\n        type: delegateType,\n        delegate: addressOf(delegateDID),\n      },\n    );\n    return true;\n  }\n\n  /**\n  * Revokes attribute from DID Document\n  * Returns true on success\n  *\n  * @param { string } did - did of identity of interest\n  * @param { DIDAttribute } attributeType - type of attribute to revoke\n  * @param { IUpdateData } updateData - data required to identify the correct attribute to revoke\n  * @returns Promise<boolean>\n  */\n  async revokeAttribute(\n    did: string,\n    attributeType: DIDAttribute,\n    updateData: IUpdateAttributeData,\n  ): Promise<boolean> {\n    await this._sendTransaction(\n      'revokeAttribute',\n      did,\n      attributeType,\n      updateData,\n    );\n    return true;\n  }\n\n  /**\n  * Changes the owner of particular decentralised identity\n  * Returns true on success\n  *\n  * @param { string } did - did of current identity owner\n  * @param { string } newOwner - did of new owner that will be set on success\n  * @returns Promise<boolean>\n  */\n  async changeOwner(\n    did: string,\n    newOwner: string,\n  ): Promise<boolean> {\n    try {\n      const tx = await this._didRegistry.changeOwner(\n        addressOf(did),\n        addressOf(newOwner),\n      );\n      const receipt = await tx.wait();\n      const event = receipt.events.find(\n        (e: Event) => (e.event === 'DIDOwnerChanged'),\n      );\n      if (!event) return false;\n    } catch (error) {\n      throw new Error(error);\n    }\n    return true;\n  }\n\n  /**\n  * Revokes authentication methods, public keys and delegates from DID document\n  *\n  * @example\n  * ```typescript\n  *import { Operator } from '@ew-did-registry/did-resolver';\n  *import { Keys } from '@ew-did-registry/keys';\n  *\n  * const providerSettings = {\n  *   type: ProviderTypes.HTTP,\n  *   uriOrInfo: 'https://volta-rpc.energyweb.org',\n  * }\n  * const ownerKeys = new Keys();\n  * const owner = EwSigner.fromPrivateKey(ownerKeys.privateKey, providerSettings);\n  * const operator = new Operator(\n  *   owner,\n  *   resolverSettings,\n  *  );\n  * const updated = await operator.deactivate(did);\n  * ```\n  *\n  * @param did\n  * @returns Promise<boolean>\n  */\n  async deactivate(did: string): Promise<void> {\n    const document = await this.read(did);\n    await this._revokeAuthentications(\n      did,\n      document.authentication as IAuthentication[],\n      document.publicKey,\n    );\n    await this._revokePublicKeys(did, document.publicKey);\n    await this._revokeServices(did, document.service);\n  }\n\n  /**\n * Revokes authentication attributes\n *\n * @param did\n * @param auths\n * @param publicKeys\n * @private\n */\n  protected async _revokeAuthentications(\n    did: string,\n    auths: IAuthentication[],\n    publicKeys: IPublicKey[],\n  ): Promise<void> {\n    for await (const pk of publicKeys) {\n      const match = pk.id.match(delegatePubKeyIdPattern);\n      if (match) {\n        const type = auths.find(\n          (auth) => auth.publicKey === match[0],\n        ) ? PubKeyType.SignatureAuthentication2018\n          : PubKeyType.VerificationKey2018;\n        await this.revokeDelegate(did, type, `did:${Methods.Erc1056}:${pk.ethereumAddress}`);\n      }\n    }\n  }\n\n  /**\n * Revokes Public key attribute\n *\n * @param did\n * @param publicKeys\n * @private\n */\n  protected async _revokePublicKeys(did: string, publicKeys: IPublicKey[]): Promise<void> {\n    for await (const pk of publicKeys) {\n      const match = pk.id.match(pubKeyIdPattern);\n      if (match) {\n        const encoding = Object.values(Encoding)\n          .find((enc) => pk[encodedPubKeyName(enc)]) as Encoding;\n        await this.revokeAttribute(\n          did,\n          DIDAttribute.PublicKey,\n          {\n            type: DIDAttribute.PublicKey,\n            value: {\n              id: pk.id,\n              publicKey: pk[encodedPubKeyName(encoding)] as string,\n              tag: pk.id.split('#')[1],\n            },\n          },\n        );\n      }\n    }\n  }\n\n  /**\n * Revokes service attributes\n *\n * @param did\n * @param services\n * @private\n */\n  protected async _revokeServices(did: string, services: IServiceEndpoint[]): Promise<void> {\n    for await (const service of services) {\n      await this.revokeAttribute(\n        did,\n        DIDAttribute.ServicePoint,\n        {\n          type: DIDAttribute.ServicePoint,\n          value: {\n            id: service.id,\n            type: service.type,\n            serviceEndpoint: service.serviceEndpoint,\n          },\n        },\n      );\n    }\n  }\n\n  /**\n * Private function to send transactions\n *\n * @param method\n * @param did\n * @param didAttribute\n * @param updateData\n * @param validity\n * @param overrides\n * @private\n */\n  protected async _sendTransaction(\n    method: string,\n    did: string,\n    didAttribute: DIDAttribute,\n    updateData: IUpdateData,\n    validity?: number,\n    overrides?: {\n      nonce?: number;\n    },\n  ): Promise<BigNumber> {\n    const identity = addressOf(did);\n    const name = formatBytes32String(\n      this._composeAttributeName(didAttribute, updateData),\n    );\n    const value = hexify(\n      didAttribute === PublicKey || didAttribute === ServicePoint\n        ? updateData.value as IAttributePayload\n        : updateData.delegate as string,\n    );\n    const params: (string | number | Record<string, unknown>)[] = [\n      identity,\n      name,\n      value,\n    ];\n    if (validity !== undefined) {\n      params.push(validity);\n    }\n    if (overrides) {\n      params.push(overrides);\n    }\n    try {\n      const tx = await this._didRegistry[method](...params);\n      const receipt = await tx.wait();\n      const event: Event = receipt.events.find(\n        (e: Event) => (didAttribute === DIDAttribute.PublicKey && e.event === 'DIDAttributeChanged')\n          || (didAttribute === DIDAttribute.ServicePoint && e.event === 'DIDAttributeChanged')\n          || (didAttribute === DIDAttribute.Authenticate && e.event === 'DIDDelegateChanged'),\n      );\n      return BigNumber.from(event.blockNumber as number);\n    } catch (e) {\n      throw new Error(e.message);\n    }\n  }\n\n  /**\n * Util functions to create attribute name, supported by read method\n *\n * @param attribute\n * @param updateData\n * @private\n */\n  protected _composeAttributeName(attribute: DIDAttribute, updateData: IUpdateData): string {\n    const {\n      algo, type, encoding,\n    } = updateData;\n    switch (attribute) {\n      case DIDAttribute.PublicKey:\n        return `did/${DIDAttribute.PublicKey}/${algo}/${type}/${encoding}`;\n      case DIDAttribute.Authenticate:\n        return updateData.type;\n      case DIDAttribute.ServicePoint:\n        return `did/${DIDAttribute.ServicePoint}/${(updateData.value as IAttributePayload).type}`;\n      default:\n        throw new Error('Unknown attribute name');\n    }\n  }\n}\n"]}},"error":null,"hash":"5ec4d793a4013e6b14cb0106c5d376bb","cacheData":{"env":{}}}