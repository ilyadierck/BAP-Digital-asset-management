{"id":"node_modules/@ew-did-registry/claims/dist/claims/claims.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\claims\\dist\\claims\\claims.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\claims\\src\\claims\\claims.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\claims\\package.json","includedInParent":true,"mtime":1642815195336},{"name":"@ew-did-registry/jwt","loc":{"line":13,"column":22},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\claims\\dist\\claims\\claims.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\jwt\\dist\\index.js"},{"name":"@ew-did-registry/did-resolver-interface","loc":{"line":14,"column":41},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\claims\\dist\\claims\\claims.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\dist\\index.js"},{"name":"../utils","loc":{"line":15,"column":24},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\claims\\dist\\claims\\claims.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\claims\\dist\\utils\\index.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Claims = void 0;\nconst jwt_1 = require(\"@ew-did-registry/jwt\");\nconst did_resolver_interface_1 = require(\"@ew-did-registry/did-resolver-interface\");\nconst utils_1 = require(\"../utils\");\n/**\n * @class\n * Base class for extending by other claims classes\n */\nclass Claims {\n    /**\n     * @constructor\n     *\n     * @param { IKeys } keys\n     * @param document\n     * @param store\n     */\n    constructor(owner, document, store) {\n        this.document = document;\n        this.store = store;\n        this.keys = { publicKey: owner.publicKey, privateKey: owner.privateKey };\n        this.jwt = new jwt_1.JWT(owner);\n        this.did = document.did;\n    }\n    /**\n     * Verifies signers signature on received token\n     * @example\n     * ```typescript\n     * import { Keys } from '@ew-did-registry/keys';\n     * import { Claims } from '@ew-did-registry/claims';\n     *\n     * const user = new Keys();\n     * const claims = new Claims(user);\n     * const verified = claims.verifySignature(token, userDid);\n     * ```\n     *\n     * @param { string } token token signature on which you want to check\n     * @param { string } signer did of the signer\n     */\n    verifySignature(token, signer) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const signerPubKey = yield this.document.ownerPubKey(signer);\n            try {\n                yield this.jwt.verify(token, signerPubKey);\n            }\n            catch (error) {\n                return false;\n            }\n            return true;\n        });\n    }\n    /**\n     * Verifies integrity of the claim, the claim is issued by the user\n     *  delegate and the authenticity of the issuer's signature\n     *\n     * @param claimUrl {string}\n     * @param hashFns {{ [alg: string]: (data: string) => string }}\n     */\n    verify(claimUrl, hashFns) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const token = yield this.store.get(claimUrl);\n            const claim = this.jwt.decode(token);\n            if (!(yield this.verifySignature(token, claim.iss))) {\n                throw new Error('Invalid signature');\n            }\n            if (!this.document.isValidDelegate(did_resolver_interface_1.DelegateTypes.verification, claim.signer, claim.did)) {\n                throw new Error('Issuer isn\\'t a use\\'r delegate');\n            }\n            const service = yield this.document.readAttribute({ service: { serviceEndpoint: claimUrl } }, (claim).sub);\n            const { hash, hashAlg } = service;\n            const createHash = Object.assign(Object.assign({}, utils_1.hashes), hashFns)[hashAlg];\n            if (hash !== createHash(token)) {\n                throw new Error('Claim was changed');\n            }\n            return claim;\n        });\n    }\n}\nexports.Claims = Claims;\n"},"sourceMaps":{"js":{"version":3,"file":"claims.js","sourceRoot":"","sources":["../../src/claims/claims.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,8CAAiD;AAEjD,oFAA0F;AAG1F,oCAAkC;AAElC;;;GAGG;AACH,MAAa,MAAM;IAUjB;;;;;;OAMG;IACH,YACE,KAAe,EACL,QAA0B,EAC1B,KAAgB;QADhB,aAAQ,GAAR,QAAQ,CAAkB;QAC1B,UAAK,GAAL,KAAK,CAAW;QAE1B,IAAI,CAAC,IAAI,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,UAAU,EAAE,CAAC;QACzE,IAAI,CAAC,GAAG,GAAG,IAAI,SAAG,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC;IAC1B,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACG,eAAe,CAAC,KAAa,EAAE,MAAc;;YACjD,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;YAC7D,IAAI;gBACF,MAAM,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,YAAsB,CAAC,CAAC;aACtD;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,KAAK,CAAC;aACd;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAED;;;;;;OAMG;IACG,MAAM,CACV,QAAgB,EAAE,OAAqD;;YAEvE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC7C,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAC4B,CAAC;YAChE,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;gBACnD,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACtC;YACD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,sCAAa,CAAC,YAAY,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,CAAC,EAAE;gBACvF,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;aACpD;YACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,aAAa,CAC/C,EAAE,OAAO,EAAE,EAAE,eAAe,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,GAAG,CACpC,CAAC;YACtB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;YAClC,MAAM,UAAU,GAAG,gCAAK,cAAM,GAAK,OAAO,EAAG,OAAiB,CAAC,CAAC;YAChE,IAAI,IAAI,KAAK,UAAU,CAAC,KAAK,CAAC,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;aACtC;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KAAA;CACF;AAjFD,wBAiFC","sourcesContent":["import { IDIDDocumentFull } from '@ew-did-registry/did-document';\nimport { IJWT, JWT } from '@ew-did-registry/jwt';\nimport { IDidStore } from '@ew-did-registry/did-store-interface';\nimport { DelegateTypes, IServiceEndpoint } from '@ew-did-registry/did-resolver-interface';\nimport { EwSigner } from '@ew-did-registry/did-ethr-resolver';\nimport { IClaims, IPublicClaim, IPrivateClaim } from '../models';\nimport { hashes } from '../utils';\n\n/**\n * @class\n * Base class for extending by other claims classes\n */\nexport class Claims implements IClaims {\n  public jwt: IJWT;\n\n  public keys: {\n    privateKey?: string;\n    publicKey: string;\n  };\n\n  public did: string;\n\n  /**\n   * @constructor\n   *\n   * @param { IKeys } keys\n   * @param document\n   * @param store\n   */\n  constructor(\n    owner: EwSigner,\n    protected document: IDIDDocumentFull,\n    protected store: IDidStore,\n  ) {\n    this.keys = { publicKey: owner.publicKey, privateKey: owner.privateKey };\n    this.jwt = new JWT(owner);\n    this.did = document.did;\n  }\n\n  /**\n   * Verifies signers signature on received token\n   * @example\n   * ```typescript\n   * import { Keys } from '@ew-did-registry/keys';\n   * import { Claims } from '@ew-did-registry/claims';\n   *\n   * const user = new Keys();\n   * const claims = new Claims(user);\n   * const verified = claims.verifySignature(token, userDid);\n   * ```\n   *\n   * @param { string } token token signature on which you want to check\n   * @param { string } signer did of the signer\n   */\n  async verifySignature(token: string, signer: string): Promise<boolean> {\n    const signerPubKey = await this.document.ownerPubKey(signer);\n    try {\n      await this.jwt.verify(token, signerPubKey as string);\n    } catch (error) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Verifies integrity of the claim, the claim is issued by the user\n   *  delegate and the authenticity of the issuer's signature\n   *\n   * @param claimUrl {string}\n   * @param hashFns {{ [alg: string]: (data: string) => string }}\n   */\n  async verify(\n    claimUrl: string, hashFns?: { [alg: string]: (data: string) => string },\n  ): Promise<IPublicClaim | IPrivateClaim> {\n    const token = await this.store.get(claimUrl);\n    const claim = this.jwt.decode(token) as\n      (IPublicClaim | IPrivateClaim) & { iss: string; sub: string };\n    if (!(await this.verifySignature(token, claim.iss))) {\n      throw new Error('Invalid signature');\n    }\n    if (!this.document.isValidDelegate(DelegateTypes.verification, claim.signer, claim.did)) {\n      throw new Error('Issuer isn\\'t a use\\'r delegate');\n    }\n    const service = await this.document.readAttribute(\n      { service: { serviceEndpoint: claimUrl } }, (claim).sub,\n    ) as IServiceEndpoint;\n    const { hash, hashAlg } = service;\n    const createHash = { ...hashes, ...hashFns }[hashAlg as string];\n    if (hash !== createHash(token)) {\n      throw new Error('Claim was changed');\n    }\n    return claim;\n  }\n}\n"]}},"error":null,"hash":"500eb7a9b47ed4420a23b294aca4769c","cacheData":{"env":{}}}