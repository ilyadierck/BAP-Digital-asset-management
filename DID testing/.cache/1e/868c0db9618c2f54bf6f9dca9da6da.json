{"id":"node_modules/@ew-did-registry/did-registry/dist/index.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\dist\\index.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\src\\index.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\package.json","includedInParent":true,"mtime":1642815195336},{"name":"@ew-did-registry/keys","loc":{"line":12,"column":23},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\dist\\index.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\keys\\dist\\index.js"},{"name":"@ew-did-registry/did-resolver-interface","loc":{"line":13,"column":41},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\dist\\index.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\dist\\index.js"},{"name":"@ew-did-registry/did","loc":{"line":14,"column":22},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\dist\\index.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did\\dist\\index.js"},{"name":"@ew-did-registry/did-document","loc":{"line":15,"column":31},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\dist\\index.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-document\\dist\\index.js"},{"name":"@ew-did-registry/claims","loc":{"line":16,"column":25},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\dist\\index.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\claims\\dist\\index.js"},{"name":"@ew-did-registry/jwt","loc":{"line":17,"column":22},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-registry\\dist\\index.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\jwt\\dist\\index.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst keys_1 = require(\"@ew-did-registry/keys\");\nconst did_resolver_interface_1 = require(\"@ew-did-registry/did-resolver-interface\");\nconst did_1 = require(\"@ew-did-registry/did\");\nconst did_document_1 = require(\"@ew-did-registry/did-document\");\nconst claims_1 = require(\"@ew-did-registry/claims\");\nconst jwt_1 = require(\"@ew-did-registry/jwt\");\n/**\n * @class {DIDRegistry}\n */\nclass DIDRegistry {\n    constructor(keys, did, operator, store, _providerSettings) {\n        this.operator = operator;\n        this.store = store;\n        this.did = new did_1.DID();\n        const [, method] = did.split(':');\n        this.did.set(did);\n        if (!Object.values(did_1.Methods).includes(method)) {\n            throw new Error('Unknown Method!');\n        }\n        this.keyStore = new Map();\n        this.keyStore.set(did_resolver_interface_1.KeyTags.OWNER, keys);\n        this.jwt = new jwt_1.JWT(keys);\n        this.document = new did_document_1.DIDDocumentFactory(did).createFull(operator);\n        this.claims = new claims_1.ClaimsFactory(keys, this.document, store, _providerSettings);\n        this.operator = operator;\n        this.providerSettings = _providerSettings;\n    }\n    /**\n     * Configures registry for use with another method\n     *\n     * @example\n     * ```typescript\n     * import DIDRegistry from '@ew-did-registry/did-regsitry';\n     * import { Method } from '@ew-did-registry/did';\n     *\n     * const providerSettings = {\n     *  type: ProviderTypes.HTTP,\n     *  uriOrInfo: https://volta-rpc.energyweb.org,\n     * }\n     * const reg = new DIDRegistry(keys, ethDid, ethResolver, didStore, providerSettings);\n     * reg.changeResolver(new Resolver(ewcSettings, providerUrl), Method.EnergyWeb);\n     * ```\n     * @param { IResolver } resolver\n     * @param { Methods } method\n     * @returns { Promise<void> }\n     */\n    changeOperator(operator, method) {\n        const keys = this.keyStore.get(did_resolver_interface_1.KeyTags.OWNER);\n        if (!keys) {\n            return;\n        }\n        const did = this.did.get(method);\n        if (!did) {\n            return;\n        }\n        this.document = new did_document_1.DIDDocumentFactory(did).createFull(operator);\n        this.claims = new claims_1.ClaimsFactory(keys, this.document, this.store, this.providerSettings);\n        this.operator = operator;\n    }\n    /**\n     *\n     * Update keyStore from user's didDocument\n     */\n    updateKeyStore() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const doc = yield this.document.read();\n            // eslint-disable-next-line no-restricted-syntax, guard-for-in\n            for (const key in doc.publicKey) {\n                const pubKey = doc.publicKey[key];\n                const publicKeyTag = pubKey.id.split('#')[1];\n                const encoding = Object.values(did_resolver_interface_1.Encoding).find((e) => {\n                    const suffix = `${e[0].toUpperCase()}${e.slice(1)}`;\n                    return pubKey[`publicKey${suffix}`];\n                });\n                if (!encoding) {\n                    throw new Error('Unknown encoding');\n                }\n                const value = pubKey[`publicKey${encoding[0].toUpperCase()}${encoding.slice(1)}`];\n                this.keyStore.set(publicKeyTag, new keys_1.Keys({ publicKey: value.slice(2) }));\n            }\n            return true;\n        });\n    }\n    /**\n     * Returns DID document of the corresponding did\n     *\n     * @example\n     * ```typescript\n     * import DIDRegistry from '@ew-did-registry/did-registry';\n     *\n     * const document = await reg.read(did);\n     * ```\n     *\n     * @param { string } did\n     * @returns { Promsise<DIDDocumentLite> }\n     */\n    read(did) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const temporaryFactory = new did_document_1.DIDDocumentFactory(did);\n            const didDocumentLite = temporaryFactory.createFull(this.operator, did);\n            yield didDocumentLite.read(did);\n            return didDocumentLite;\n        });\n    }\n}\nexports.default = DIDRegistry;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { IKeys, Keys } from '@ew-did-registry/keys';\nimport {\n  IOperator,\n  KeyTags,\n  Encoding,\n  ProviderSettings,\n} from '@ew-did-registry/did-resolver-interface';\nimport { IDID, Methods, DID } from '@ew-did-registry/did';\nimport { DIDDocumentFactory, IDIDDocumentFull } from '@ew-did-registry/did-document';\nimport { ClaimsFactory, IClaimsFactory } from '@ew-did-registry/claims';\nimport { IJWT, JWT } from '@ew-did-registry/jwt';\nimport { IDidStore } from '@ew-did-registry/did-store-interface';\nimport { IDIDRegistry } from './interface';\n\n/**\n * @class {DIDRegistry}\n */\nclass DIDRegistry implements IDIDRegistry {\n  did: IDID = new DID();\n\n  keyStore: Map<string, IKeys>;\n\n  document: IDIDDocumentFull;\n\n  claims: IClaimsFactory;\n\n  providerSettings: ProviderSettings;\n\n  jwt: IJWT;\n\n  constructor(\n    keys: IKeys,\n    did: string,\n    private operator: IOperator,\n    public store: IDidStore,\n    _providerSettings: ProviderSettings,\n  ) {\n    const [, method] = did.split(':');\n    this.did.set(did);\n\n    if (!Object.values(Methods).includes(method as Methods)) {\n      throw new Error('Unknown Method!');\n    }\n\n    this.keyStore = new Map<string, IKeys>();\n    this.keyStore.set(KeyTags.OWNER, keys);\n\n    this.jwt = new JWT(keys);\n    this.document = new DIDDocumentFactory(did).createFull(operator);\n    this.claims = new ClaimsFactory(keys, this.document, store, _providerSettings);\n    this.operator = operator;\n    this.providerSettings = _providerSettings;\n  }\n\n  /**\n   * Configures registry for use with another method\n   *\n   * @example\n   * ```typescript\n   * import DIDRegistry from '@ew-did-registry/did-regsitry';\n   * import { Method } from '@ew-did-registry/did';\n   *\n   * const providerSettings = {\n   *  type: ProviderTypes.HTTP,\n   *  uriOrInfo: https://volta-rpc.energyweb.org,\n   * }\n   * const reg = new DIDRegistry(keys, ethDid, ethResolver, didStore, providerSettings);\n   * reg.changeResolver(new Resolver(ewcSettings, providerUrl), Method.EnergyWeb);\n   * ```\n   * @param { IResolver } resolver\n   * @param { Methods } method\n   * @returns { Promise<void> }\n   */\n  changeOperator(operator: IOperator, method: Methods | string): void {\n    const keys = this.keyStore.get(KeyTags.OWNER);\n    if (!keys) {\n      return;\n    }\n    const did = this.did.get(method);\n    if (!did) {\n      return;\n    }\n    this.document = new DIDDocumentFactory(did).createFull(operator);\n    this.claims = new ClaimsFactory(keys, this.document, this.store, this.providerSettings);\n    this.operator = operator;\n  }\n\n  /**\n   *\n   * Update keyStore from user's didDocument\n   */\n  async updateKeyStore(): Promise<boolean> {\n    const doc = await this.document.read();\n\n    // eslint-disable-next-line no-restricted-syntax, guard-for-in\n    for (const key in doc.publicKey) {\n      const pubKey = doc.publicKey[key];\n      const publicKeyTag = pubKey.id.split('#')[1];\n\n      const encoding = Object.values(Encoding).find((e) => {\n        const suffix = `${e[0].toUpperCase()}${e.slice(1)}`;\n        return pubKey[`publicKey${suffix}`];\n      });\n\n      if (!encoding) {\n        throw new Error('Unknown encoding');\n      }\n      const value = pubKey[`publicKey${encoding[0].toUpperCase()}${encoding.slice(1)}`] as string;\n\n      this.keyStore.set(publicKeyTag, new Keys({ publicKey: value.slice(2) }));\n    }\n    return true;\n  }\n\n  /**\n   * Returns DID document of the corresponding did\n   *\n   * @example\n   * ```typescript\n   * import DIDRegistry from '@ew-did-registry/did-registry';\n   *\n   * const document = await reg.read(did);\n   * ```\n   *\n   * @param { string } did\n   * @returns { Promsise<DIDDocumentLite> }\n   */\n  async read(did: string): Promise<IDIDDocumentFull> {\n    const temporaryFactory = new DIDDocumentFactory(did);\n    const didDocumentLite = temporaryFactory.createFull(this.operator, did);\n    await didDocumentLite.read(did);\n    return didDocumentLite;\n  }\n}\n\nexport default DIDRegistry;\n"]}},"error":null,"hash":"062d94e647f9bf50664b9772fc0f87a3","cacheData":{"env":{}}}