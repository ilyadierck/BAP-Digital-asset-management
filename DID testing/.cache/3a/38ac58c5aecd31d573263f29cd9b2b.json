{"id":"node_modules/@ew-did-registry/did-ethr-resolver/dist/implementations/ewSigner.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\ewSigner.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\src\\implementations\\ewSigner.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\package.json","includedInParent":true,"mtime":1642814787149},{"name":"ethers","loc":{"line":13,"column":25},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\ewSigner.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\ethers\\lib.esm\\index.js"},{"name":"@ew-did-registry/keys","loc":{"line":14,"column":23},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\ewSigner.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\keys\\dist\\index.js"},{"name":"../utils","loc":{"line":15,"column":24},"parent":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\implementations\\ewSigner.js","resolved":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-ethr-resolver\\dist\\utils\\index.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EwSigner = void 0;\nconst ethers_1 = require(\"ethers\");\nconst keys_1 = require(\"@ew-did-registry/keys\");\nconst utils_1 = require(\"../utils\");\n/**\n * A signer class that encapsulates the ethers Signer and ensures that publicKey is available.\n * The public is necessary for verification of signatures made by the signer.\n * The purpose of the ethers encapsulation is to allow consumers more flexiblity in ethers version.\n */\nclass EwSigner extends ethers_1.Signer {\n    /**\n     * A private constructor as this class uses factory method for instantiation API.\n     */\n    constructor(signer, publicKey, privateKey) {\n        super();\n        this.signer = signer;\n        this.privateKey = privateKey;\n        if (!signer.provider) {\n            throw new Error('Signer is not connected to chain. Provider must be defined');\n        }\n        if (!publicKey) {\n            throw new Error('Public key should be a non-empty string');\n        }\n        const publicKeyWithoutHexPrefix = publicKey.slice(0, 2) === '0x' ? publicKey.slice(2) : publicKey;\n        this.publicKey = new keys_1.Keys({ publicKey: publicKeyWithoutHexPrefix }).publicKey;\n        this.provider = signer.provider;\n    }\n    getAddress() {\n        return this.signer.getAddress();\n    }\n    sendTransaction(transaction) {\n        return this.signer.sendTransaction(transaction);\n    }\n    signMessage(message) {\n        return this.signer.signMessage(message);\n    }\n    signTransaction(transaction) {\n        return this.signer.signTransaction(transaction);\n    }\n    connect(provider) {\n        return this.signer.connect(provider);\n    }\n    /**\n     * A factory method to create an EwSigner from a private key.\n      * ```typescript\n      * import {\n      *   Operator,\n      *   EwSigner\n      * } from '@ew-did-registry/did-ethr-resolver';\n      * import { Keys } from '@ew-did-registry/keys';\n      *\n      * const keys = new Keys();\n      * const providerSettings = { type: ProviderTypes.HTTP, };\n      * const signer = EwSigner.fromPrivateKey(keys.privateKey, providerSettings);\n      * const operator = new Operator(signer, registrySettings);\n      * ```\n     * @param privateKey a secp256k1 private key.\n     * @param providerSettings settings from which a web3 provider can be obtained\n     */\n    static fromPrivateKey(privateKey, providerSettings) {\n        const provider = utils_1.getProvider(providerSettings);\n        const wallet = new ethers_1.Wallet(privateKey, provider);\n        const compressedPubKey = ethers_1.utils.computePublicKey(wallet.publicKey, true);\n        return new EwSigner(wallet, compressedPubKey, privateKey);\n    }\n    /**\n     * A factory method to create an EwSigner using an ethers library Signer.\n     * This is convenient if a suitable ethers signer is available.\n     * If instead an EIP1993 provider is available, see {@linkcode fromEIP1193}\n     * @param signer an ethers Signer connected to chain\n     * @param publicKey the publicKey of the signer associated with the provider\n     */\n    static fromEthersSigner(signer, publicKey) {\n        return new EwSigner(signer, publicKey);\n    }\n    /**\n    * A factory method to create an EwSigner without needing a specific ethers object.\n    * Instead, any object which conforms to the necessary interface can be used.\n    * See https://docs.ethers.io/v5/api/providers/other/#Web3Provider for interface description.\n    *\n    * @example\n    * ```typescript\n    * import { Operator, EwSigner } from '@ew-did-registry/did-ethr-resolver';\n    * import detectMetamask from \"@metamask/detect-provider\";\n    *\n    * const web3Provider = await detectMetamask();\n    * const web3Signer = EwSigner.fromEIP1193(web3Provider, publicKey);\n    * const operator = new Operator(web3Signer, registrySettings);\n    * ```\n    * @param eip1993Provider an EIP1193 provider (https://docs.ethers.io/v5/api/providers/other/#Web3Provider)\n    * @param publicKey the publicKey of the signer associated with the provider\n    */\n    // eslint-disable-next-line max-len\n    static fromEIP1193(eip1993Provider, publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = new ethers_1.providers.Web3Provider(eip1993Provider);\n            const signer = provider.getSigner();\n            try {\n                // Call getAddress() to check that signer has address\n                // Signer could be returned by not actually have an address\n                // Best to check now and \"fail fast\"\n                yield signer.getAddress();\n            }\n            catch (err) {\n                err.message = `Error instantiating EwSigner from ethers Provider. Provider must have signer with address. ${err.message}`;\n                throw err;\n            }\n            return new EwSigner(signer, publicKey);\n        });\n    }\n}\nexports.EwSigner = EwSigner;\n"},"sourceMaps":{"js":{"version":3,"file":"ewSigner.js","sourceRoot":"","sources":["../../src/implementations/ewSigner.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Signer, providers, utils, Wallet,\n} from 'ethers';\nimport { ProviderSettings } from '@ew-did-registry/did-resolver-interface';\nimport { Keys } from '@ew-did-registry/keys';\nimport { getProvider } from '../utils';\n\ntype EIP1193ProviderType = providers.ExternalProvider | providers.JsonRpcFetchFunc;\n\n/**\n * A signer class that encapsulates the ethers Signer and ensures that publicKey is available.\n * The public is necessary for verification of signatures made by the signer.\n * The purpose of the ethers encapsulation is to allow consumers more flexiblity in ethers version.\n */\nexport class EwSigner extends Signer {\n  public readonly provider: providers.Provider;\n\n  public readonly publicKey: string;\n\n  /**\n   * A private constructor as this class uses factory method for instantiation API.\n   */\n  private constructor(\n    public readonly signer: Signer,\n    publicKey: string,\n    public readonly privateKey?: string,\n  ) {\n    super();\n    if (!signer.provider) {\n      throw new Error('Signer is not connected to chain. Provider must be defined');\n    }\n    if (!publicKey) {\n      throw new Error('Public key should be a non-empty string');\n    }\n    const publicKeyWithoutHexPrefix = publicKey.slice(0, 2) === '0x' ? publicKey.slice(2) : publicKey;\n    this.publicKey = new Keys({ publicKey: publicKeyWithoutHexPrefix }).publicKey;\n    this.provider = signer.provider;\n  }\n\n  getAddress(): Promise<string> {\n    return this.signer.getAddress();\n  }\n\n  sendTransaction(\n    transaction: providers.TransactionRequest,\n  ): Promise<providers.TransactionResponse> {\n    return this.signer.sendTransaction(transaction);\n  }\n\n  signMessage(message: string | utils.Bytes): Promise<string> {\n    return this.signer.signMessage(message);\n  }\n\n  signTransaction(transaction: providers.TransactionRequest): Promise<string> {\n    return this.signer.signTransaction(transaction);\n  }\n\n  connect(provider: providers.Provider): Signer {\n    return this.signer.connect(provider);\n  }\n\n  /**\n   * A factory method to create an EwSigner from a private key.\n    * ```typescript\n    * import {\n    *   Operator,\n    *   EwSigner\n    * } from '@ew-did-registry/did-ethr-resolver';\n    * import { Keys } from '@ew-did-registry/keys';\n    *\n    * const keys = new Keys();\n    * const providerSettings = { type: ProviderTypes.HTTP, };\n    * const signer = EwSigner.fromPrivateKey(keys.privateKey, providerSettings);\n    * const operator = new Operator(signer, registrySettings);\n    * ```\n   * @param privateKey a secp256k1 private key.\n   * @param providerSettings settings from which a web3 provider can be obtained\n   */\n  public static fromPrivateKey(privateKey: string, providerSettings: ProviderSettings): EwSigner {\n    const provider = getProvider(providerSettings);\n    const wallet = new Wallet(privateKey, provider);\n    const compressedPubKey = utils.computePublicKey(wallet.publicKey, true);\n    return new EwSigner(wallet, compressedPubKey, privateKey);\n  }\n\n  /**\n   * A factory method to create an EwSigner using an ethers library Signer.\n   * This is convenient if a suitable ethers signer is available.\n   * If instead an EIP1993 provider is available, see {@linkcode fromEIP1193}\n   * @param signer an ethers Signer connected to chain\n   * @param publicKey the publicKey of the signer associated with the provider\n   */\n  public static fromEthersSigner(signer: Signer, publicKey: string): EwSigner {\n    return new EwSigner(signer, publicKey);\n  }\n\n  /**\n  * A factory method to create an EwSigner without needing a specific ethers object.\n  * Instead, any object which conforms to the necessary interface can be used.\n  * See https://docs.ethers.io/v5/api/providers/other/#Web3Provider for interface description.\n  *\n  * @example\n  * ```typescript\n  * import { Operator, EwSigner } from '@ew-did-registry/did-ethr-resolver';\n  * import detectMetamask from \"@metamask/detect-provider\";\n  *\n  * const web3Provider = await detectMetamask();\n  * const web3Signer = EwSigner.fromEIP1193(web3Provider, publicKey);\n  * const operator = new Operator(web3Signer, registrySettings);\n  * ```\n  * @param eip1993Provider an EIP1193 provider (https://docs.ethers.io/v5/api/providers/other/#Web3Provider)\n  * @param publicKey the publicKey of the signer associated with the provider\n  */\n  // eslint-disable-next-line max-len\n  public static async fromEIP1193(eip1993Provider: EIP1193ProviderType, publicKey: string): Promise<EwSigner> {\n    const provider = new providers.Web3Provider(eip1993Provider);\n    const signer = provider.getSigner();\n    try {\n      // Call getAddress() to check that signer has address\n      // Signer could be returned by not actually have an address\n      // Best to check now and \"fail fast\"\n      await signer.getAddress();\n    } catch (err) {\n      err.message = `Error instantiating EwSigner from ethers Provider. Provider must have signer with address. ${err.message}`;\n      throw err;\n    }\n    return new EwSigner(signer, publicKey);\n  }\n}\n"]}},"error":null,"hash":"086fddcce8d9224373f511aeae48bcca","cacheData":{"env":{}}}