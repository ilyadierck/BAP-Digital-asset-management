{"id":"node_modules/@ew-did-registry/did-resolver-interface/dist/interface.js","dependencies":[{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\dist\\interface.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\src\\interface.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\package.json","includedInParent":true,"mtime":1643668307056},{"name":"C:\\Users\\Ilya\\Documents\\Jaar3Informatica\\Bachelorproef\\DID testing\\node_modules\\@ew-did-registry\\did-resolver-interface\\package.json","includedInParent":true,"mtime":1642814787149}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n"},"sourceMaps":{"js":{"version":3,"file":"interface.js","sourceRoot":"","sources":["../src/interface.ts"],"names":[],"mappings":"","sourcesContent":["import { BigNumber } from 'ethers';\nimport {\n  IDIDDocument,\n  DIDAttribute,\n  IUpdateData,\n  DelegateTypes,\n  IPublicKey,\n  IServiceEndpoint,\n  IAuthentication,\n  PubKeyType,\n  DocumentSelector,\n  IDIDLogData,\n} from './models';\n\nexport interface IResolver {\n  /**\n   * Constructor takes keys and resolver settings to create a new Resolver\n   * constructor(settings?: IResolverSettings);\n   *\n   * Private members:\n   *   settings;\n   */\n\n  /**\n   * Read method resolves the DID Document for the provided DID.\n   * Should not be confused with “read” method in DID Document Lite,\n   * which returns the required attribute from the DID Document.\n   *\n   * @param {string} did\n   * @returns {Promise<IDIDDocument>}\n   */\n  read(did: string): Promise<IDIDDocument>;\n\n  /**\n   * Returns the current owner for certain DID.\n   * If DID document has not been created, did will be identical to address.\n   * After creation DID owner can be changed.\n   *\n   * @param {string} did\n   * @returns {Promise<string>}\n   */\n  identityOwner(did: string): Promise<string>;\n\n  /**\n   * Checks if the delegate is present for a particular DID.\n   * Returns boolean.\n   *\n   * @param {string} identityDID\n   * @param {DelegateTypes} delegateType\n   * @param {string} delegateDID\n   * @returns {Promise<boolean>}\n   */\n  validDelegate(\n    identityDID: string,\n    delegateType: DelegateTypes,\n    delegateDID: string\n  ): Promise<boolean>;\n\n  readAttribute(\n    did: string,\n    selector: DocumentSelector,\n  ): Promise<IPublicKey | IServiceEndpoint | IAuthentication | undefined>;\n\n  readOwnerPubKey(did: string): Promise<string | undefined>;\n\n  /**\n   * Reads events starting from specified block\n   *\n   * @param block {number} - block to start reading from\n   *\n   * @returns - part of document along with last read block\n   */\n  readFromBlock(did: string,\n    topBlock: BigNumber,\n  ): Promise<IDIDLogData>;\n\n  lastBlock(did: string): Promise<BigNumber>;\n}\n\nexport interface IOperator extends IResolver {\n  /**\n   * Registers a DID-Document for a given DID, and defines the provided context.\n   *\n   * @param {string} did\n   * @param {string} context\n   * @returns {boolean}\n   */\n  create(): Promise<boolean>;\n\n  /**\n   * Updates relevant attribute of the DID Document.\n   *\n   * @param {string} did\n   * @param { DIDAttribute } attribute\n   * @param { IUpdateData } value\n   * @param { number } validity\n   * @returns {boolean}\n   */\n  update(\n    did: string,\n    attribute: DIDAttribute,\n    value: IUpdateData,\n    validity?: number | BigNumber\n  ): Promise<BigNumber>;\n\n  /**\n   * Attempts to deactivate the DID Document for a given DID.\n   * Successful, if the transaction is accepted by the smart contract.\n   * Deactivation should be done by the owner of DID.\n   *\n   * @param {string} did\n   * @returns {boolean}\n   */\n  deactivate(did: string): Promise<void>;\n\n  revokeDelegate(did: string, delegateType: PubKeyType, delegateDID: string): Promise<boolean>;\n\n  revokeAttribute(\n    did: string,\n    attributeType: DIDAttribute,\n    updateData: IUpdateData\n  ): Promise<boolean>;\n}\n"]}},"error":null,"hash":"1b498a3b13ee4be9a3eac2a17c36c3fe","cacheData":{"env":{}}}